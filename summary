
Basics:
https://pastebin.com/
https://trinket.io/ share code and running it
docs.python.org
http://sametmax.com/ce-quil-faut-savoir-en-python/
https://automatetheboringstuff.com/#toc

https://leanpub.com/python-apprentice/read_sample

pypi (packae python in pypi.python.org)
python 2 EOL 2020

pep8, pep20 zen of python import this to print zen of python

Philosophy: beatiful is better than ugly, explicit is better than implicit, simple is better than complex, complex is better than complicated.
Readability counts, special cases are not special enaugh to break the rules, spare is better than danse (2 lines between functions), flat is better than nested
error should never pass silently unless explicitly silenced

Obviously no bugs vs no obvious bugs

It's easier to ask forgiveness than it is to get permission : try except better than test if exist (file) because can be deleted after 

So exception is better than error code!!!

PEP  Python Enhancement Proposal
Flask python web api

help in the python shell
IDLE or iPython advanced python interpreted (REPL) for ex reload module on changes   ctrl d to quit python shell
pycharm (editeur python avec debugger step by step execute) 
pip3, iPython3, python3 (default 2 if pyton --version)

Strings: isalpha(), capitalize(), replace(), isdigit(), split(",") => list, "{1} {2}".format(name1, name2)
Bool: True, False cast to int 1 0 recast to string True False, None
if not true or muche, "muche" if a > b else "truc"

list [], append, if truc in list, del list[1], list[1:-1] from 1 to -1 from last
len(list)
range(10) list of 0 to 10
break, continue

while i > 10:

dicos = {
	"name" : "truc1",
	"name2" : None
}
List of dict ...etc  dicos.get("key", "defaultReturn"), .keys(), .values()
try:
	code
except specificEroor as error:
	print(error)
except Exception:
	handle default
	
Other types: complex (complex numbers), bytes, tuple (immutable list like strings), set and frozenset (unordered collection of unique immutable objects in it like uniq linux cmd)

tuple unpacking : a, b = b, a
input("enter something"):function to type something in keyboard

and or 

def func_args(parametre_normal,
     parametre_avec_default="valeur par défaut",
*args,
**kwargs)):
	print arg1
	print args
func_args("param1", "param2", "infini1", "infini2", kwinfini1=1, kwinfini2=2)

Nested functions is function in function because used only in 
  
files : file = open("file.txt", "a")      a append, r read, w write, rb read binary, wb write binary
		file.write("fdsfsd")
		fire.close()
		
		file.readline() in loop
		
		
yield (in place of return) to create generators function like readlines() to not reexecute from the beginning

lambda anonymous function: double = lambda x: x*2   (function in 1 line)
double(5)

class Truc:
	pass

truc = Truc()

contructeur __init__(), self in class
redefine __str__(self) to pretty print instead of memory place

class attribute : inside class normal var without self 
class Truc:
	class_attribute = 1

Truc.class_attribute

class Vache(Animal)  to inherit  super() to reference the partent function

no public or privated, ___ to signal that this is private

import file
file.function

multi line comment 
""" 
docstring
"""

virtualenv for ex multiple django version in different python env

virtualenv command line  (we try to keep them in the same folder)
source /home/venvs/env1/bin/activate to activate and use , deactivate

pyinstaller create exe file to create binary (python 3.4 max production version developper version even last python) pyinstaller main.py cmd line create build dist .spec and main.exe
pyinstaller.org
pyinstaller --onefile .\main.py (include and files in the exe so larger exe file)

setup wizard to install the exe easier with tools innersetup for windows or rpm for windows (I guess), setup tools to install from source

integer no max number, int float bool  scalar, string & bytes & dict & list collections
== != ... elif else flat is better than nested



path = r'raw string\' # no need to escape \
sys.argv[1]
d = b'bytes string'   decode method of bytes object or encode ("utf-8")
__name__ __main__ if executed directly
from truc import much1,much2

docstring, to use help(my_function), docstring for function short description than args than return, dosctring module short description & usage

#!/usr/bin/env python3        (shebang comment begging to say python3 or 2) work in windows too

Objects: 

int immutable too, recreate new objects than garbadge collector

is to test if 2 objects same reference,  id(a) to print the reference
python threat list as references (so edit second reference edit first too)

time.ctime()
global key word but not good
type(words), dir(words) to inspect object, module attributes ...

"str" * 2 = "strstr"
tuples : ex = ("1", "2"), tuple of tuple possible, single element tuple t = (1,) else it is considered as math()
tuple unpacking : (a, (b, (c,d))) = (1, (2, (3,4)))  & swap a,b = b,a

join better than + for concat, split for ex: chaine = ''.join(["1", "2"]) better than + 
partition like split ex: origin, _, destination = "Seattle-Boston".partition('-') # we can use _ as unused variable
"Current position {pos1} {pos2}".format(pos1="yes",
										pos2="yesyes")
range = > stop or start stop or start stop step

t = [1, 2, 4, 5]
for i, v in emumerate(t):
	print("i = {}, v = {}".format(i, v))
	
to hard copy a list: new_list = s[:] or copy method or v = list(s)

s = l * 4 (4 referece to l)

list.index('elem') return the index of elem, list.count("elem") return number of occurence
del or l.remove('elem')
l.insert(2, "new_elem")
join concert to a string, split from str to list
l1.extend(l2), l.reverse(), l.sort(reverse=True, key=len)
y = sorted(x) => create new list same with reversed(but return iterator so list(y) to see as list)

dicos:
	no order, constructor dict or copy, f.dupate(g) to merge g in f
for key in dicos:
	print("{key} => {value}".format(key=key, value=colors[key]))
	
for value in dicos.values():
	print(value)
default iteration is keys 	just like in & not in work default in key

for key, value in dicos.items():
	print ...
to remove : del
we can use pprint module

set:  so used to remove duplicates
set unordered collection of unique immutable objets 
s = {6, 25, 3535}

create empty set : s = set() because {} create empty dict, 
s.add.(12), s.update([1, 2, 4]) to add multiple from collection, s.remove(3) but error if not found, s.discard(3)
copy method
blue_eyes.union(blond_hair) == blond_hair.union(blue_eyes) or intersection, difference have this but not this, symmetric_difference one or other, issubset, issuperset, isdisjoint


################################## Exception #######################################

It's easier to ask forgiveness than it is to get permission : try except better than test if exist (file) because can be deleted after 

exceptions:
	obviously don't ctch indentationError ...
	
raise to raise error (for exemple current)

we can raise excpetion than can be caught in try catch (if case we create our own exception for exemple)
if condition:
	raise ValueError('not good')       # not cool way it s easier to ask for forgiveness!!!
	
but for exemple no need to raise typeError (or all types) because it raise itself anyway  just try directly
	OSError for file error

	most used: IndexError, KeyError ValueError TypeError...
We can use finnaly 



################################## iteratos and generators #######################################

comprehensions: because simple is better than complex list comprehension, set comprehension, dict comprehension 

but complex comprehension are bad!!

list comprehension : new_list = [expression(i) for i in old_list if filter(i)] just a way to write it one line
set same but {}

dict_comp = {value : key for (key,value) in dictonary.items() if filter(i)} # to inverse dict ex

glob find files, os path and others oserror size...

iterator = iter(list or iterable)
next_item  = next(iterator)   # comme un pointeur qui se deplace  end StopIteration



Generators: are iterable      its a loop function but executed on iteration, mieux : fonction executé à l'itération quand on veut pas process une fonction jusqu'à la fin

def gen12():    
	yield 1
	yield 2   # return generator object  or StopIteration error
next (gen12()) # or :
for x in gen12():
	print x
but doing : g = gen12() # create a new generator 

good for infinite, great files ... maths ..

generator are iterable so comprehension of generator (short way function):
gen_comp = (x*x for x in range(1, 100)) # create gen_comp   we need to recall this if we want to create another generator just like in function
list(gen_comp) # genere la list but preferably iterate sinon c'est quoi l'interet...
list(gen_comp) # empty because alredy 

OBJECT GENERTOR SINGLE USE OBJECT

`list` creating Python reserves memory for the whole list and calculates it on the spot. In case of generator, we receive only ”algorithm”/ “instructions” how to calculate that Python stores. And each time we call for generator, it will only “generate” the next element of the sequence on demand according to “instructions”.

So generator will be slower, as every time the element of sequence is calculated and yielded, function context/state has to be saved to be picked up next time for generating next value. That “saving and loading function context/state” takes time.


for exemple : sum(x*x for x in range(1000000000000))  # generator without () python use sum function ()  as () generator for readability (readability counts)
so in this example the list is not created!!!!!!!

itertools tools to create iterators   itertools.count() (create an iterator of infinte list )
itertools.islice(iterable, start, stop)

build iterator creation tools:
sum, any zip all min max enumerate
sum(itertools.islice(iterable, start, stop)) # samething here use as generator
any([False, True, False])  # True  if any true
all([False, True, False])  # False if all true
zip gives tuple (combine d'itrable (1,1, 1) (2,2,2) ...), 

itertools.chain concat, itertools.count, itertools.islice


############################################### OBJECTS ####################################################
